# Production Dockerfile for Aegis Frontend
FROM node:18-alpine as builder

# Build arguments
ARG VITE_API_URL=https://api.aegis.yourdomain.com/api/v1
ARG VITE_ENVIRONMENT=production
ARG VITE_USE_MOCK_API=false

# Set working directory
WORKDIR /app

# Copy package files  
COPY package*.json ./
COPY pnpm-lock.yaml ./

# Install pnpm and dependencies like development
RUN npm install -g pnpm
RUN pnpm install

# Copy source code
COPY . .

# Build application with production optimizations
ENV NODE_ENV=production
ENV VITE_API_URL=${VITE_API_URL}
ENV VITE_ENVIRONMENT=${VITE_ENVIRONMENT}
ENV VITE_USE_MOCK_API=${VITE_USE_MOCK_API}

RUN pnpm run build

# Production stage with Nginx
FROM nginx:1.25-alpine as production

# Install additional packages for health checks
RUN apk add --no-cache curl

# Setup nginx user (nginx user already exists in base image)
RUN mkdir -p /var/cache/nginx /var/log/nginx /var/run

# Copy built application from builder stage
COPY --from=builder /app/dist /usr/share/nginx/html

# Create nginx directories
RUN mkdir -p /var/cache/nginx /var/log/nginx /var/run && \
    chown -R nginx:nginx /var/cache/nginx /var/log/nginx /var/run /usr/share/nginx/html

# Create nginx production configuration  
RUN cat > /etc/nginx/nginx.conf << 'EOF'
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /tmp/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    
    # Performance optimizations
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
    
    server {
        listen 80;
        server_name _;
        root /usr/share/nginx/html;
        index index.html index.htm;
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Handle /assets/ directory specifically (critical for ES modules)
        location /assets/ {
            try_files $uri =404;
        }
        
        # Handle client-side routing
        location / {
            try_files $uri $uri/ /index.html;
        }
        
        # Static assets with long cache
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        # Note: API calls go directly to backend via React app configuration
        # No nginx proxy needed since VITE_API_URL points to external backend
        
        # Security - deny access to hidden files
        location ~ /\. {
            deny all;
        }
    }
}
EOF

# Set proper permissions
RUN chown -R nginx:nginx /usr/share/nginx/html /var/cache/nginx /var/log/nginx /var/run

# Remove default configs that may conflict
RUN rm -f /etc/nginx/conf.d/default.conf

# Switch to nginx user
USER nginx

# Expose ports
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=20s --retries=3 \
    CMD curl -f http://localhost:80/health || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]