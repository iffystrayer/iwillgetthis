"""
Pydantic schemas for Vulnerability Management system
"""

from pydantic import BaseModel, Field, validator
from typing import Optional, List, Dict, Any
from datetime import datetime
from enum import Enum


# Enums
class VulnerabilitySeverityEnum(str, Enum):
    CRITICAL = "critical"
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"
    INFORMATIONAL = "informational"


class VulnerabilityStatusEnum(str, Enum):
    DETECTED = "detected"
    CONFIRMED = "confirmed"
    TRIAGED = "triaged"
    IN_PROGRESS = "in_progress"
    PATCHED = "patched"
    MITIGATED = "mitigated"
    ACCEPTED = "accepted"
    FALSE_POSITIVE = "false_positive"
    CLOSED = "closed"


class VulnerabilityTypeEnum(str, Enum):
    SOFTWARE = "software"
    CONFIGURATION = "configuration"
    NETWORK = "network"
    WEB_APPLICATION = "web_application"
    AUTHENTICATION = "authentication"
    ENCRYPTION = "encryption"
    PRIVILEGE_ESCALATION = "privilege_escalation"
    INJECTION = "injection"
    DENIAL_OF_SERVICE = "denial_of_service"
    DATA_EXPOSURE = "data_exposure"


class ScanTypeEnum(str, Enum):
    NETWORK_SCAN = "network_scan"
    WEB_APP_SCAN = "web_app_scan"
    AUTHENTICATED_SCAN = "authenticated_scan"
    UNAUTHENTICATED_SCAN = "unauthenticated_scan"
    COMPLIANCE_SCAN = "compliance_scan"
    CONTAINER_SCAN = "container_scan"
    CODE_SCAN = "code_scan"
    DEPENDENCY_SCAN = "dependency_scan"


class RemediationStatusEnum(str, Enum):
    NOT_STARTED = "not_started"
    PLANNED = "planned"
    IN_PROGRESS = "in_progress"
    TESTING = "testing"
    COMPLETED = "completed"
    VERIFIED = "verified"
    FAILED = "failed"
    DEFERRED = "deferred"


# Base Schemas
class VulnerabilityBase(BaseModel):
    title: str = Field(..., min_length=1, max_length=500)
    description: str = Field(..., min_length=1)
    vulnerability_type: VulnerabilityTypeEnum
    
    # External References
    cve_id: Optional[str] = Field(None, regex=r"^CVE-\d{4}-\d{4,}$")
    cwe_id: Optional[str] = Field(None, regex=r"^CWE-\d+$")
    vendor_advisory_id: Optional[str] = None
    external_references: Optional[List[str]] = []
    
    # Severity and Scoring
    severity: VulnerabilitySeverityEnum
    cvss_score: Optional[float] = Field(None, ge=0.0, le=10.0)
    cvss_vector: Optional[str] = None
    cvss_version: str = "3.1"
    
    # Asset Information
    asset_id: Optional[int] = None
    affected_systems: Optional[List[str]] = []
    network_location: Optional[str] = None
    service_port: Optional[str] = None
    url_path: Optional[str] = None
    
    # Technical Details
    affected_software: Optional[str] = None
    affected_version: Optional[str] = None
    vulnerable_component: Optional[str] = None
    attack_vector: Optional[str] = None
    attack_complexity: Optional[str] = None
    privileges_required: Optional[str] = None
    user_interaction: Optional[str] = None
    
    # Discovery Information
    discovered_date: datetime
    discovery_method: Optional[str] = None
    reported_by: Optional[str] = None
    
    # Assignment
    assigned_to: Optional[int] = None
    team_assigned: Optional[str] = None
    priority: Optional[str] = None
    
    # Deadlines
    resolution_deadline: Optional[datetime] = None
    
    # Threat Context
    exploit_available: bool = False
    exploit_maturity: Optional[str] = None
    in_the_wild: bool = False
    
    # Remediation
    patch_available: bool = False
    patch_details: Optional[str] = None
    workaround_available: bool = False
    workaround_details: Optional[str] = None
    
    # Compliance
    compliance_frameworks: Optional[List[str]] = []
    regulatory_requirements: Optional[List[str]] = []
    
    # Metadata
    tags: Optional[List[str]] = []
    custom_fields: Optional[Dict[str, Any]] = {}
    
    @validator('cvss_score')
    def validate_cvss_score(cls, v, values):
        if v is not None:
            severity = values.get('severity')
            if severity == VulnerabilitySeverityEnum.CRITICAL and v < 9.0:
                raise ValueError('Critical severity requires CVSS score >= 9.0')
            elif severity == VulnerabilitySeverityEnum.HIGH and (v < 7.0 or v >= 9.0):
                raise ValueError('High severity requires CVSS score 7.0-8.9')
            elif severity == VulnerabilitySeverityEnum.MEDIUM and (v < 4.0 or v >= 7.0):
                raise ValueError('Medium severity requires CVSS score 4.0-6.9')
            elif severity == VulnerabilitySeverityEnum.LOW and (v < 0.1 or v >= 4.0):
                raise ValueError('Low severity requires CVSS score 0.1-3.9')
        return v


class VulnerabilityCreate(VulnerabilityBase):
    pass


class VulnerabilityUpdate(BaseModel):
    title: Optional[str] = Field(None, min_length=1, max_length=500)
    description: Optional[str] = Field(None, min_length=1)
    vulnerability_type: Optional[VulnerabilityTypeEnum] = None
    
    cve_id: Optional[str] = None
    cwe_id: Optional[str] = None
    vendor_advisory_id: Optional[str] = None
    external_references: Optional[List[str]] = None
    
    severity: Optional[VulnerabilitySeverityEnum] = None
    cvss_score: Optional[float] = Field(None, ge=0.0, le=10.0)
    cvss_vector: Optional[str] = None
    
    asset_id: Optional[int] = None
    affected_systems: Optional[List[str]] = None
    network_location: Optional[str] = None
    service_port: Optional[str] = None
    url_path: Optional[str] = None
    
    affected_software: Optional[str] = None
    affected_version: Optional[str] = None
    vulnerable_component: Optional[str] = None
    
    status: Optional[VulnerabilityStatusEnum] = None
    assigned_to: Optional[int] = None
    team_assigned: Optional[str] = None
    priority: Optional[str] = None
    
    resolution_deadline: Optional[datetime] = None
    
    exploit_available: Optional[bool] = None
    exploit_maturity: Optional[str] = None
    in_the_wild: Optional[bool] = None
    
    patch_available: Optional[bool] = None
    patch_details: Optional[str] = None
    workaround_available: Optional[bool] = None
    workaround_details: Optional[str] = None
    
    verified: Optional[bool] = None
    verification_notes: Optional[str] = None
    
    false_positive: Optional[bool] = None
    false_positive_reason: Optional[str] = None
    
    compliance_frameworks: Optional[List[str]] = None
    tags: Optional[List[str]] = None
    custom_fields: Optional[Dict[str, Any]] = None


class UserSummary(BaseModel):
    """Lightweight user summary for vulnerability display"""
    id: int
    email: str
    full_name: Optional[str] = None


class AssetSummary(BaseModel):
    """Lightweight asset summary for vulnerability display"""
    id: int
    name: str
    asset_type: str
    criticality: Optional[str] = None


class VulnerabilityResponse(VulnerabilityBase):
    id: int
    vulnerability_id: str
    
    # Calculated scores
    risk_score: Optional[float] = None
    business_impact_score: Optional[float] = None
    exploitability_score: Optional[float] = None
    
    # Status tracking
    status: VulnerabilityStatusEnum
    first_seen: datetime
    last_seen: Optional[datetime] = None
    
    # SLA tracking
    sla_deadline: Optional[datetime] = None
    actual_resolution_date: Optional[datetime] = None
    
    # Threat intelligence
    threat_intelligence: Optional[Dict[str, Any]] = {}
    
    # Verification
    verified: bool = False
    verified_by: Optional[UserSummary] = None
    verification_date: Optional[datetime] = None
    verification_notes: Optional[str] = None
    
    # False positive handling
    false_positive: bool = False
    false_positive_reason: Optional[str] = None
    false_positive_marked_by: Optional[UserSummary] = None
    false_positive_date: Optional[datetime] = None
    
    # Audit trail
    created_at: datetime
    updated_at: Optional[datetime] = None
    
    # Relationships
    asset: Optional[AssetSummary] = None
    assigned_user: Optional[UserSummary] = None
    creator: Optional[UserSummary] = None
    
    # Counts
    remediation_task_count: Optional[int] = 0
    assessment_count: Optional[int] = 0
    exploit_attempt_count: Optional[int] = 0
    
    class Config:
        from_attributes = True


# Vulnerability Scan Schemas
class VulnerabilityScanBase(BaseModel):
    name: str = Field(..., min_length=1, max_length=200)
    description: Optional[str] = None
    scan_type: ScanTypeEnum
    scanner_tool: Optional[str] = None
    scanner_version: Optional[str] = None
    
    target_scope: List[str] = Field(..., min_items=1)
    scan_profile: Optional[str] = None
    authentication_used: bool = False
    credentials_type: Optional[str] = None
    
    scheduled_scan: bool = False
    scan_frequency: Optional[str] = None
    next_scheduled_scan: Optional[datetime] = None
    auto_remediation_enabled: bool = False
    
    compliance_frameworks: Optional[List[str]] = []
    baseline_scan: bool = False
    
    scan_notes: Optional[str] = None
    tags: Optional[List[str]] = []


class VulnerabilityScanCreate(VulnerabilityScanBase):
    pass


class VulnerabilityScanUpdate(BaseModel):
    name: Optional[str] = Field(None, min_length=1, max_length=200)
    description: Optional[str] = None
    scan_type: Optional[ScanTypeEnum] = None
    
    target_scope: Optional[List[str]] = None
    scan_profile: Optional[str] = None
    
    end_time: Optional[datetime] = None
    status: Optional[str] = None
    
    total_hosts_scanned: Optional[int] = None
    total_vulnerabilities: Optional[int] = None
    critical_count: Optional[int] = None
    high_count: Optional[int] = None
    medium_count: Optional[int] = None
    low_count: Optional[int] = None
    info_count: Optional[int] = None
    
    scan_coverage_percentage: Optional[float] = None
    false_positive_rate: Optional[float] = None
    scan_quality_score: Optional[float] = None
    
    policy_violations: Optional[int] = None
    
    raw_output_file: Optional[str] = None
    report_file: Optional[str] = None
    
    scan_notes: Optional[str] = None
    tags: Optional[List[str]] = None


class VulnerabilityScanResponse(VulnerabilityScanBase):
    id: int
    scan_id: str
    
    start_time: datetime
    end_time: Optional[datetime] = None
    duration_minutes: Optional[int] = None
    status: str
    
    # Results summary
    total_hosts_scanned: int = 0
    total_vulnerabilities: int = 0
    critical_count: int = 0
    high_count: int = 0
    medium_count: int = 0
    low_count: int = 0
    info_count: int = 0
    
    # Quality metrics
    scan_coverage_percentage: Optional[float] = None
    false_positive_rate: Optional[float] = None
    scan_quality_score: Optional[float] = None
    
    policy_violations: int = 0
    
    # Files
    raw_output_file: Optional[str] = None
    report_file: Optional[str] = None
    
    # Relationships
    initiator: Optional[UserSummary] = None
    comparison_scan_id: Optional[int] = None
    
    created_at: datetime
    updated_at: Optional[datetime] = None
    
    class Config:
        from_attributes = True


# Remediation Task Schemas
class RemediationTaskBase(BaseModel):
    title: str = Field(..., min_length=1, max_length=300)
    description: str = Field(..., min_length=1)
    remediation_type: Optional[str] = None
    
    assigned_to: Optional[int] = None
    assigned_team: Optional[str] = None
    priority: Optional[str] = None
    
    planned_start_date: Optional[datetime] = None
    planned_completion_date: Optional[datetime] = None
    
    remediation_steps: Optional[str] = None
    technical_requirements: Optional[str] = None
    business_impact: Optional[str] = None
    rollback_plan: Optional[str] = None
    
    change_request_id: Optional[str] = None
    approval_required: bool = False
    
    testing_required: bool = True
    
    estimated_effort_hours: Optional[float] = Field(None, ge=0)
    estimated_cost: Optional[float] = Field(None, ge=0)
    resource_requirements: Optional[str] = None
    
    dependencies: Optional[List[str]] = []
    blocking_issues: Optional[List[str]] = []
    
    success_criteria: Optional[str] = None
    completion_criteria: Optional[str] = None
    verification_method: Optional[str] = None
    
    implementation_risk: Optional[str] = None
    business_risk: Optional[str] = None
    downtime_required: bool = False
    estimated_downtime_hours: Optional[float] = Field(None, ge=0)
    
    stakeholders: Optional[List[Dict[str, str]]] = []
    communication_plan: Optional[str] = None
    
    notes: Optional[str] = None
    tags: Optional[List[str]] = []


class RemediationTaskCreate(RemediationTaskBase):
    vulnerability_id: int


class RemediationTaskUpdate(BaseModel):
    title: Optional[str] = Field(None, min_length=1, max_length=300)
    description: Optional[str] = Field(None, min_length=1)
    remediation_type: Optional[str] = None
    
    assigned_to: Optional[int] = None
    assigned_team: Optional[str] = None
    priority: Optional[str] = None
    
    planned_start_date: Optional[datetime] = None
    planned_completion_date: Optional[datetime] = None
    actual_start_date: Optional[datetime] = None
    actual_completion_date: Optional[datetime] = None
    
    status: Optional[RemediationStatusEnum] = None
    progress_percentage: Optional[int] = Field(None, ge=0, le=100)
    
    remediation_steps: Optional[str] = None
    technical_requirements: Optional[str] = None
    business_impact: Optional[str] = None
    rollback_plan: Optional[str] = None
    
    approval_status: Optional[str] = None
    approved_by: Optional[int] = None
    approval_date: Optional[datetime] = None
    
    testing_completed: Optional[bool] = None
    testing_results: Optional[str] = None
    validation_completed: Optional[bool] = None
    validation_notes: Optional[str] = None
    
    actual_effort_hours: Optional[float] = Field(None, ge=0)
    actual_cost: Optional[float] = Field(None, ge=0)
    
    dependencies: Optional[List[str]] = None
    blocking_issues: Optional[List[str]] = None
    
    implementation_risk: Optional[str] = None
    business_risk: Optional[str] = None
    estimated_downtime_hours: Optional[float] = Field(None, ge=0)
    
    notes: Optional[str] = None
    tags: Optional[List[str]] = None


class RemediationTaskResponse(RemediationTaskBase):
    id: int
    task_id: str
    vulnerability_id: int
    
    actual_start_date: Optional[datetime] = None
    actual_completion_date: Optional[datetime] = None
    
    status: RemediationStatusEnum
    progress_percentage: int = 0
    
    approval_status: Optional[str] = None
    approved_by: Optional[UserSummary] = None
    approval_date: Optional[datetime] = None
    
    testing_completed: bool = False
    testing_results: Optional[str] = None
    validation_completed: bool = False
    validation_notes: Optional[str] = None
    
    actual_effort_hours: Optional[float] = None
    actual_cost: Optional[float] = None
    
    created_at: datetime
    updated_at: Optional[datetime] = None
    
    # Relationships
    vulnerability: Optional[Dict[str, Any]] = None
    assigned_user: Optional[UserSummary] = None
    approver: Optional[UserSummary] = None
    creator: Optional[UserSummary] = None
    
    update_count: Optional[int] = 0
    
    class Config:
        from_attributes = True


# Dashboard and Analytics Schemas
class VulnerabilityDashboardData(BaseModel):
    """Vulnerability dashboard summary data"""
    total_vulnerabilities: int
    vulnerabilities_by_severity: Dict[str, int]
    vulnerabilities_by_status: Dict[str, int]
    vulnerabilities_by_type: Dict[str, int]
    
    overdue_remediations: int
    sla_violations: int
    new_vulnerabilities_last_30_days: int
    remediated_vulnerabilities_last_30_days: int
    
    vulnerability_trend: Dict[str, Any]  # Trend over time
    remediation_effectiveness: Dict[str, Any]
    top_vulnerable_assets: List[Dict[str, Any]]
    critical_vulnerabilities: List[Dict[str, Any]]


class VulnerabilityHeatmapData(BaseModel):
    """Vulnerability heatmap visualization data"""
    asset_vulnerability_matrix: List[List[Dict[str, Any]]]  # 2D grid
    asset_labels: List[str]
    severity_labels: List[str]
    vulnerability_counts: Dict[str, int]


class VulnerabilityReportFilter(BaseModel):
    """Filters for vulnerability reports"""
    severities: Optional[List[VulnerabilitySeverityEnum]] = None
    statuses: Optional[List[VulnerabilityStatusEnum]] = None
    types: Optional[List[VulnerabilityTypeEnum]] = None
    assets: Optional[List[int]] = None
    date_from: Optional[datetime] = None
    date_to: Optional[datetime] = None
    assigned_users: Optional[List[int]] = None
    has_exploit: Optional[bool] = None
    has_patch: Optional[bool] = None
    include_false_positives: bool = False


class BulkVulnerabilityOperation(BaseModel):
    """Bulk operations on vulnerabilities"""
    operation: str  # update_status, assign_user, bulk_remediate, etc.
    vulnerability_ids: List[int]
    operation_data: Dict[str, Any]


class BulkVulnerabilityOperationResponse(BaseModel):
    """Response for bulk vulnerability operations"""
    success: bool
    operation: str
    processed_count: int
    success_count: int
    error_count: int
    errors: List[str] = []
    updated_vulnerabilities: List[int] = []


# Specialized Schemas
class VulnerabilityRiskAssessment(BaseModel):
    """Risk assessment specifically for vulnerabilities"""
    vulnerability_id: int
    likelihood_score: float = Field(ge=0.0, le=10.0)
    impact_score: float = Field(ge=0.0, le=10.0)
    exploitability_score: float = Field(ge=0.0, le=10.0)
    business_impact_score: float = Field(ge=0.0, le=10.0)
    overall_risk_score: float = Field(ge=0.0, le=10.0)
    risk_rating: str
    assessment_rationale: str
    assessment_date: datetime
    assessor_id: int


class VulnerabilityThreatIntelligence(BaseModel):
    """Threat intelligence data for vulnerabilities"""
    vulnerability_id: int
    exploit_available: bool
    exploit_maturity: str
    threat_actors: List[str] = []
    campaigns: List[str] = []
    iocs: List[Dict[str, str]] = []  # Indicators of Compromise
    attack_patterns: List[str] = []
    mitigation_recommendations: List[str] = []
    intelligence_sources: List[str] = []
    confidence_level: str
    last_updated: datetime