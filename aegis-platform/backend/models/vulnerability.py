"""
Vulnerability Management System Data Models
Comprehensive vulnerability tracking, assessment, and remediation management
"""

from sqlalchemy import Column, Integer, String, Boolean, DateTime, ForeignKey, Text, Enum, Float, JSON
from sqlalchemy.orm import relationship
from sqlalchemy.sql import func
from database import Base
import enum
from datetime import datetime


class VulnerabilitySeverity(enum.Enum):
    """CVSS-based vulnerability severity levels"""
    CRITICAL = "critical"    # CVSS 9.0-10.0
    HIGH = "high"           # CVSS 7.0-8.9
    MEDIUM = "medium"       # CVSS 4.0-6.9
    LOW = "low"            # CVSS 0.1-3.9
    INFORMATIONAL = "informational"  # CVSS 0.0


class VulnerabilityStatus(enum.Enum):
    """Vulnerability lifecycle status"""
    DETECTED = "detected"
    CONFIRMED = "confirmed"
    TRIAGED = "triaged"
    IN_PROGRESS = "in_progress"
    PATCHED = "patched"
    MITIGATED = "mitigated"
    ACCEPTED = "accepted"
    FALSE_POSITIVE = "false_positive"
    CLOSED = "closed"


class VulnerabilityType(enum.Enum):
    """Types of vulnerabilities"""
    SOFTWARE = "software"          # Software vulnerabilities (CVEs)
    CONFIGURATION = "configuration"  # Misconfigurations
    NETWORK = "network"            # Network-level vulnerabilities
    WEB_APPLICATION = "web_application"  # Web app vulnerabilities
    AUTHENTICATION = "authentication"   # Auth-related vulnerabilities
    ENCRYPTION = "encryption"      # Cryptographic vulnerabilities
    PRIVILEGE_ESCALATION = "privilege_escalation"
    INJECTION = "injection"        # SQL injection, XSS, etc.
    DENIAL_OF_SERVICE = "denial_of_service"
    DATA_EXPOSURE = "data_exposure"


class ScanType(enum.Enum):
    """Types of vulnerability scans"""
    NETWORK_SCAN = "network_scan"
    WEB_APP_SCAN = "web_app_scan"
    AUTHENTICATED_SCAN = "authenticated_scan"
    UNAUTHENTICATED_SCAN = "unauthenticated_scan"
    COMPLIANCE_SCAN = "compliance_scan"
    CONTAINER_SCAN = "container_scan"
    CODE_SCAN = "code_scan"
    DEPENDENCY_SCAN = "dependency_scan"


class RemediationStatus(enum.Enum):
    """Remediation implementation status"""
    NOT_STARTED = "not_started"
    PLANNED = "planned"
    IN_PROGRESS = "in_progress"
    TESTING = "testing"
    COMPLETED = "completed"
    VERIFIED = "verified"
    FAILED = "failed"
    DEFERRED = "deferred"


class Vulnerability(Base):
    """Core vulnerability entity"""
    __tablename__ = "vulnerabilities"
    
    id = Column(Integer, primary_key=True, index=True)
    vulnerability_id = Column(String(50), unique=True, nullable=False, index=True)  # VULN-2024-001
    
    # Vulnerability Identification
    title = Column(String(500), nullable=False)
    description = Column(Text, nullable=False)
    vulnerability_type = Column(Enum(VulnerabilityType), nullable=False)
    
    # External References
    cve_id = Column(String(20), index=True)  # CVE-2024-12345
    cwe_id = Column(String(20))              # CWE-79
    vendor_advisory_id = Column(String(100))
    external_references = Column(JSON)       # Array of external links
    
    # Severity and Scoring
    severity = Column(Enum(VulnerabilitySeverity), nullable=False)
    cvss_score = Column(Float)               # CVSS base score (0.0-10.0)
    cvss_vector = Column(String(100))        # CVSS vector string
    cvss_version = Column(String(10), default="3.1")
    
    # Custom Risk Scoring
    risk_score = Column(Float)               # Internal risk score
    business_impact_score = Column(Float)    # Business impact assessment
    exploitability_score = Column(Float)     # Exploitability assessment
    
    # Asset and Location Information
    asset_id = Column(Integer, ForeignKey("assets.id"))
    affected_systems = Column(JSON)          # Array of affected systems
    network_location = Column(String(100))   # Network segment/location
    service_port = Column(String(20))        # Affected service/port
    url_path = Column(String(500))           # For web vulnerabilities
    
    # Technical Details
    affected_software = Column(String(200))
    affected_version = Column(String(100))
    vulnerable_component = Column(String(200))
    attack_vector = Column(String(50))       # Network, Adjacent, Local, Physical
    attack_complexity = Column(String(20))   # Low, High
    privileges_required = Column(String(20)) # None, Low, High
    user_interaction = Column(String(20))    # None, Required
    
    # Discovery Information
    discovered_date = Column(DateTime(timezone=True), nullable=False)
    discovery_method = Column(String(50))    # scan, manual, report, etc.
    scan_id = Column(Integer, ForeignKey("vulnerability_scans.id"))
    reported_by = Column(String(100))
    
    # Status and Lifecycle
    status = Column(Enum(VulnerabilityStatus), default=VulnerabilityStatus.DETECTED)
    first_seen = Column(DateTime(timezone=True), server_default=func.now())
    last_seen = Column(DateTime(timezone=True))
    
    # Assignment and Ownership
    assigned_to = Column(Integer, ForeignKey("users.id"))
    team_assigned = Column(String(100))
    priority = Column(String(20))            # Critical, High, Medium, Low
    
    # SLA and Deadlines
    sla_deadline = Column(DateTime(timezone=True))
    resolution_deadline = Column(DateTime(timezone=True))
    actual_resolution_date = Column(DateTime(timezone=True))
    
    # Exploitation and Threat Context
    exploit_available = Column(Boolean, default=False)
    exploit_maturity = Column(String(20))    # Unproven, POC, Functional, High
    threat_intelligence = Column(JSON)       # Threat intel data
    in_the_wild = Column(Boolean, default=False)
    
    # Remediation Information
    remediation_effort = Column(String(20))  # Low, Medium, High
    remediation_complexity = Column(String(20))
    patch_available = Column(Boolean, default=False)
    patch_details = Column(Text)
    workaround_available = Column(Boolean, default=False)
    workaround_details = Column(Text)
    
    # Compliance and Regulatory
    compliance_frameworks = Column(JSON)     # Array of applicable frameworks
    regulatory_requirements = Column(JSON)   # Array of regulatory requirements
    
    # Verification and Validation
    verified = Column(Boolean, default=False)
    verified_by = Column(Integer, ForeignKey("users.id"))
    verification_date = Column(DateTime(timezone=True))
    verification_notes = Column(Text)
    
    # False Positive Handling
    false_positive = Column(Boolean, default=False)
    false_positive_reason = Column(Text)
    false_positive_marked_by = Column(Integer, ForeignKey("users.id"))
    false_positive_date = Column(DateTime(timezone=True))
    
    # Additional Metadata
    tags = Column(JSON)                      # Array of custom tags
    custom_fields = Column(JSON)             # Flexible custom data
    
    # Audit Trail
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())
    created_by = Column(Integer, ForeignKey("users.id"))
    
    # Relationships
    asset = relationship("Asset", back_populates="vulnerabilities")
    scan = relationship("VulnerabilityScan", back_populates="vulnerabilities")
    assigned_user = relationship("User", foreign_keys=[assigned_to])
    verifier = relationship("User", foreign_keys=[verified_by])
    false_positive_user = relationship("User", foreign_keys=[false_positive_marked_by])
    creator = relationship("User", foreign_keys=[created_by])
    
    remediation_tasks = relationship("RemediationTask", back_populates="vulnerability", cascade="all, delete-orphan")
    vulnerability_assessments = relationship("VulnerabilityAssessment", back_populates="vulnerability", cascade="all, delete-orphan")
    exploit_attempts = relationship("ExploitAttempt", back_populates="vulnerability", cascade="all, delete-orphan")


class VulnerabilityScan(Base):
    """Vulnerability scanning sessions and results"""
    __tablename__ = "vulnerability_scans"
    
    id = Column(Integer, primary_key=True, index=True)
    scan_id = Column(String(50), unique=True, nullable=False, index=True)  # SCAN-2024-001
    
    # Scan Configuration
    name = Column(String(200), nullable=False)
    description = Column(Text)
    scan_type = Column(Enum(ScanType), nullable=False)
    scanner_tool = Column(String(100))       # Nessus, OpenVAS, etc.
    scanner_version = Column(String(50))
    
    # Scan Scope and Targets
    target_scope = Column(JSON)              # Array of targets (IPs, domains, etc.)
    scan_profile = Column(String(100))       # Scan profile/policy used
    authentication_used = Column(Boolean, default=False)
    credentials_type = Column(String(50))    # SSH, Windows, SNMP, etc.
    
    # Scan Execution
    initiated_by = Column(Integer, ForeignKey("users.id"), nullable=False)
    start_time = Column(DateTime(timezone=True), nullable=False)
    end_time = Column(DateTime(timezone=True))
    duration_minutes = Column(Integer)
    status = Column(String(20))              # Running, Completed, Failed, Cancelled
    
    # Scan Results Summary
    total_hosts_scanned = Column(Integer, default=0)
    total_vulnerabilities = Column(Integer, default=0)
    critical_count = Column(Integer, default=0)
    high_count = Column(Integer, default=0)
    medium_count = Column(Integer, default=0)
    low_count = Column(Integer, default=0)
    info_count = Column(Integer, default=0)
    
    # Scan Quality and Coverage
    scan_coverage_percentage = Column(Float)
    false_positive_rate = Column(Float)
    scan_quality_score = Column(Float)
    
    # Compliance and Standards
    compliance_frameworks = Column(JSON)     # Compliance standards scanned for
    policy_violations = Column(Integer, default=0)
    
    # Output and Reporting
    raw_output_file = Column(String(500))    # Path to raw scan output
    report_file = Column(String(500))        # Path to formatted report
    baseline_scan = Column(Boolean, default=False)
    comparison_scan_id = Column(Integer, ForeignKey("vulnerability_scans.id"))
    
    # Automation and Scheduling
    scheduled_scan = Column(Boolean, default=False)
    scan_frequency = Column(String(20))      # Daily, Weekly, Monthly
    next_scheduled_scan = Column(DateTime(timezone=True))
    auto_remediation_enabled = Column(Boolean, default=False)
    
    # Metadata
    scan_notes = Column(Text)
    tags = Column(JSON)
    
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())
    
    # Relationships
    initiator = relationship("User")
    comparison_scan = relationship("VulnerabilityScan", remote_side=[id])
    vulnerabilities = relationship("Vulnerability", back_populates="scan")


class RemediationTask(Base):
    """Vulnerability remediation tracking"""
    __tablename__ = "remediation_tasks"
    
    id = Column(Integer, primary_key=True, index=True)
    task_id = Column(String(50), unique=True, nullable=False, index=True)  # REM-2024-001
    vulnerability_id = Column(Integer, ForeignKey("vulnerabilities.id"), nullable=False)
    
    # Task Information
    title = Column(String(300), nullable=False)
    description = Column(Text, nullable=False)
    remediation_type = Column(String(50))    # patch, configuration, workaround, etc.
    
    # Assignment and Ownership
    assigned_to = Column(Integer, ForeignKey("users.id"))
    assigned_team = Column(String(100))
    priority = Column(String(20))
    
    # Scheduling and Deadlines
    planned_start_date = Column(DateTime(timezone=True))
    planned_completion_date = Column(DateTime(timezone=True))
    actual_start_date = Column(DateTime(timezone=True))
    actual_completion_date = Column(DateTime(timezone=True))
    
    # Status and Progress
    status = Column(Enum(RemediationStatus), default=RemediationStatus.NOT_STARTED)
    progress_percentage = Column(Integer, default=0)
    
    # Implementation Details
    remediation_steps = Column(Text)
    technical_requirements = Column(Text)
    business_impact = Column(Text)
    rollback_plan = Column(Text)
    
    # Change Management
    change_request_id = Column(String(50))
    approval_required = Column(Boolean, default=False)
    approval_status = Column(String(20))
    approved_by = Column(Integer, ForeignKey("users.id"))
    approval_date = Column(DateTime(timezone=True))
    
    # Testing and Validation
    testing_required = Column(Boolean, default=True)
    testing_completed = Column(Boolean, default=False)
    testing_results = Column(Text)
    validation_completed = Column(Boolean, default=False)
    validation_notes = Column(Text)
    
    # Resource and Cost Management
    estimated_effort_hours = Column(Float)
    actual_effort_hours = Column(Float)
    estimated_cost = Column(Float)
    actual_cost = Column(Float)
    resource_requirements = Column(Text)
    
    # Dependencies and Blocking Issues
    dependencies = Column(JSON)              # Array of dependencies
    blocking_issues = Column(JSON)           # Array of blocking issues
    
    # Success Criteria
    success_criteria = Column(Text)
    completion_criteria = Column(Text)
    verification_method = Column(Text)
    
    # Risk and Impact Assessment
    implementation_risk = Column(String(20)) # High, Medium, Low
    business_risk = Column(String(20))
    downtime_required = Column(Boolean, default=False)
    estimated_downtime_hours = Column(Float)
    
    # Communication and Stakeholders
    stakeholders = Column(JSON)              # Array of stakeholder information
    communication_plan = Column(Text)
    
    # Metadata
    notes = Column(Text)
    attachments = Column(JSON)               # Array of file attachments
    tags = Column(JSON)
    
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())
    created_by = Column(Integer, ForeignKey("users.id"))
    
    # Relationships
    vulnerability = relationship("Vulnerability", back_populates="remediation_tasks")
    assigned_user = relationship("User", foreign_keys=[assigned_to])
    approver = relationship("User", foreign_keys=[approved_by])
    creator = relationship("User", foreign_keys=[created_by])
    
    remediation_updates = relationship("RemediationUpdate", back_populates="task", cascade="all, delete-orphan")


class RemediationUpdate(Base):
    """Progress updates for remediation tasks"""
    __tablename__ = "remediation_updates"
    
    id = Column(Integer, primary_key=True, index=True)
    task_id = Column(Integer, ForeignKey("remediation_tasks.id"), nullable=False)
    
    update_type = Column(String(50))         # progress, issue, milestone, completion
    title = Column(String(200))
    description = Column(Text, nullable=False)
    
    # Progress Information
    progress_percentage = Column(Integer)
    milestone_achieved = Column(String(200))
    issues_encountered = Column(Text)
    resolution_actions = Column(Text)
    next_steps = Column(Text)
    
    # Time and Effort Tracking
    time_spent_hours = Column(Float)
    remaining_effort_hours = Column(Float)
    
    # Attachments and Evidence
    attachments = Column(JSON)
    screenshots = Column(JSON)
    
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    created_by = Column(Integer, ForeignKey("users.id"))
    
    # Relationships
    task = relationship("RemediationTask", back_populates="remediation_updates")
    creator = relationship("User")


class VulnerabilityAssessment(Base):
    """Detailed vulnerability assessments and analysis"""
    __tablename__ = "vulnerability_assessments"
    
    id = Column(Integer, primary_key=True, index=True)
    assessment_id = Column(String(50), unique=True, nullable=False)  # ASSESS-VULN-2024-001
    vulnerability_id = Column(Integer, ForeignKey("vulnerabilities.id"), nullable=False)
    
    # Assessment Information
    assessment_type = Column(String(50))     # initial, periodic, post_remediation
    assessment_date = Column(DateTime(timezone=True), nullable=False)
    assessor_id = Column(Integer, ForeignKey("users.id"), nullable=False)
    
    # Risk Assessment
    likelihood_assessment = Column(String(20))  # Very Low to Very High
    impact_assessment = Column(String(20))
    risk_rating = Column(String(20))            # Critical, High, Medium, Low
    business_risk_score = Column(Float)
    
    # Exploitability Analysis
    exploitability_rating = Column(String(20))
    attack_complexity_analysis = Column(Text)
    required_privileges_analysis = Column(Text)
    attack_vector_analysis = Column(Text)
    
    # Impact Analysis
    confidentiality_impact = Column(String(20))  # High, Low, None
    integrity_impact = Column(String(20))
    availability_impact = Column(String(20))
    business_impact_analysis = Column(Text)
    data_at_risk = Column(Text)
    
    # Environmental Factors
    environmental_score = Column(Float)
    modified_attack_vector = Column(String(20))
    modified_attack_complexity = Column(String(20))
    collateral_damage_potential = Column(String(20))
    
    # Remediation Assessment
    remediation_complexity = Column(String(20))  # Low, Medium, High
    remediation_effort_estimate = Column(Float)   # Hours
    remediation_cost_estimate = Column(Float)
    recommended_remediation = Column(Text)
    alternative_remediations = Column(Text)
    
    # Compliance and Regulatory Impact
    compliance_violations = Column(JSON)      # Array of violated compliance requirements
    regulatory_impact = Column(Text)
    audit_implications = Column(Text)
    
    # Quality and Validation
    assessment_quality_score = Column(Float)
    peer_reviewed = Column(Boolean, default=False)
    reviewed_by = Column(Integer, ForeignKey("users.id"))
    review_date = Column(DateTime(timezone=True))
    review_notes = Column(Text)
    
    # Additional Analysis
    threat_context = Column(Text)
    asset_criticality_factor = Column(Float)
    network_exposure_analysis = Column(Text)
    compensating_controls = Column(Text)
    
    # Evidence and Documentation
    evidence_files = Column(JSON)
    proof_of_concept = Column(Text)
    testing_methodology = Column(Text)
    tools_used = Column(JSON)
    
    # Metadata
    assessment_notes = Column(Text)
    confidence_level = Column(String(20))     # High, Medium, Low
    
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())
    
    # Relationships
    vulnerability = relationship("Vulnerability", back_populates="vulnerability_assessments")
    assessor = relationship("User", foreign_keys=[assessor_id])
    reviewer = relationship("User", foreign_keys=[reviewed_by])


class ExploitAttempt(Base):
    """Tracking of exploitation attempts and incidents"""
    __tablename__ = "exploit_attempts"
    
    id = Column(Integer, primary_key=True, index=True)
    attempt_id = Column(String(50), unique=True, nullable=False)
    vulnerability_id = Column(Integer, ForeignKey("vulnerabilities.id"), nullable=False)
    
    # Attempt Information
    attempt_date = Column(DateTime(timezone=True), nullable=False)
    source_ip = Column(String(45))           # IPv4 or IPv6
    source_location = Column(String(100))    # Geographic location
    attack_vector = Column(String(100))
    
    # Success and Impact
    successful = Column(Boolean, default=False)
    impact_achieved = Column(Text)
    data_compromised = Column(Boolean, default=False)
    system_compromised = Column(Boolean, default=False)
    lateral_movement = Column(Boolean, default=False)
    
    # Detection and Response
    detected_by = Column(String(100))        # Security tool/system
    detection_time = Column(DateTime(timezone=True))
    response_time_minutes = Column(Integer)
    incident_id = Column(String(50))         # Related incident ID
    
    # Attribution and Intelligence
    threat_actor = Column(String(100))
    campaign_name = Column(String(100))
    attack_signature = Column(Text)
    iocs = Column(JSON)                      # Indicators of Compromise
    
    # Mitigation and Containment
    containment_actions = Column(Text)
    mitigation_implemented = Column(Text)
    eradication_actions = Column(Text)
    
    # Lessons Learned
    root_cause_analysis = Column(Text)
    lessons_learned = Column(Text)
    preventive_measures = Column(Text)
    
    # Evidence and Forensics
    evidence_collected = Column(JSON)
    forensic_analysis = Column(Text)
    log_entries = Column(JSON)
    
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    created_by = Column(Integer, ForeignKey("users.id"))
    
    # Relationships
    vulnerability = relationship("Vulnerability", back_populates="exploit_attempts")
    creator = relationship("User")


# Junction table for vulnerability-risk relationships
class VulnerabilityRiskMapping(Base):
    """Many-to-many relationship between vulnerabilities and risks"""
    __tablename__ = "vulnerability_risk_mapping"
    
    id = Column(Integer, primary_key=True, index=True)
    vulnerability_id = Column(Integer, ForeignKey("vulnerabilities.id"), nullable=False)
    risk_id = Column(Integer, ForeignKey("risk_register.id"), nullable=False)
    
    # Relationship details
    relationship_type = Column(String(50))   # causes, contributes_to, enables
    impact_factor = Column(Float)            # 0.0-1.0 contribution factor
    description = Column(Text)
    
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    created_by = Column(Integer, ForeignKey("users.id"))


# Junction table for vulnerability-asset relationships (if not using direct FK)
class VulnerabilityAssetMapping(Base):
    """Many-to-many relationship between vulnerabilities and assets"""
    __tablename__ = "vulnerability_asset_mapping"
    
    id = Column(Integer, primary_key=True, index=True)
    vulnerability_id = Column(Integer, ForeignKey("vulnerabilities.id"), nullable=False)
    asset_id = Column(Integer, ForeignKey("assets.id"), nullable=False)
    
    # Relationship details
    impact_type = Column(String(50))         # affects, hosted_on, depends_on
    severity_override = Column(Enum(VulnerabilitySeverity))  # Asset-specific severity
    business_criticality = Column(String(20))  # High, Medium, Low
    exposure_level = Column(String(20))      # External, Internal, Isolated
    
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    created_by = Column(Integer, ForeignKey("users.id"))