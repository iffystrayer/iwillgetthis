# ==============================================
# Blackbox Exporter Configuration
# ==============================================
# External monitoring and health checks
# ==============================================

modules:
  # HTTP 2xx check
  http_2xx:
    prober: http
    timeout: 5s
    http:
      valid_http_versions: ["HTTP/1.1", "HTTP/2.0"]
      valid_status_codes: [200, 201, 202, 204]
      method: GET
      headers:
        User-Agent: "Aegis-Monitoring/1.0"
      no_follow_redirects: false
      fail_if_ssl: false
      fail_if_not_ssl: true
      fail_if_body_matches_regexp: []
      fail_if_body_not_matches_regexp: []
      fail_if_header_matches: []
      fail_if_header_not_matches: []
      tls_config:
        insecure_skip_verify: false
      preferred_ip_protocol: "ip4"

  # HTTP POST check
  http_post_2xx:
    prober: http
    timeout: 5s
    http:
      method: POST
      headers:
        Content-Type: "application/json"
      body: '{"health": "check"}'
      valid_status_codes: [200, 201, 202]

  # TCP connectivity check
  tcp_connect:
    prober: tcp
    timeout: 5s

  # ICMP ping check
  icmp:
    prober: icmp
    timeout: 5s
    icmp:
      preferred_ip_protocol: "ip4"

  # DNS resolution check
  dns:
    prober: dns
    timeout: 5s
    dns:
      query_name: "yourdomain.com"
      query_type: "A"
      valid_rcodes:
        - NOERROR
      validate_answer_rrs:
        fail_if_matches_regexp: []
        fail_if_not_matches_regexp: []

  # SSL certificate check
  ssl_cert_check:
    prober: tcp
    timeout: 5s
    tcp:
      query_response:
        - expect: "^SSH-2.0-"
        - send: "quit"
      tls: true
      tls_config:
        insecure_skip_verify: false

  # HTTP with basic auth
  http_2xx_basic_auth:
    prober: http
    timeout: 5s
    http:
      method: GET
      valid_status_codes: [200]
      basic_auth:
        username: "monitoring"
        password: "your-basic-auth-password"

  # JSON API response check
  http_json_api:
    prober: http
    timeout: 5s
    http:
      method: GET
      valid_status_codes: [200]
      headers:
        Accept: "application/json"
        User-Agent: "Aegis-Monitoring/1.0"
      fail_if_body_not_matches_regexp:
        - '"status":\s*"ok"'

  # Database connectivity (PostgreSQL)
  tcp_postgres:
    prober: tcp
    timeout: 5s
    tcp:
      query_response:
        - send: ""
        - expect: ".*"

  # Redis connectivity
  tcp_redis:
    prober: tcp
    timeout: 5s
    tcp:
      query_response:
        - send: "PING\r\n"
        - expect: "PONG"