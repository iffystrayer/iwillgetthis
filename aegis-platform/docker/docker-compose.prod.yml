version: '3.8'

services:
  # Production MySQL Database
  db:
    image: mysql:8.0
    container_name: aegis-db-prod
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME:-aegis_production}
      MYSQL_USER: ${DB_USER:-aegis_user}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d
    ports:
      - "${DB_PORT:-3306}:3306"
    networks:
      - aegis-network-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${DB_USER:-aegis_user}", "-p${DB_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    command: --default-authentication-plugin=mysql_native_password --innodb-buffer-pool-size=256M

  # Production Redis Cache
  redis:
    image: redis:7-alpine
    container_name: aegis-redis-prod
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - aegis-network-prod
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru

  # Production Backend API
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile.prod
      args:
        - BUILD_ENV=production
    container_name: aegis-backend-prod
    environment:
      # Core Application
      ENVIRONMENT: production
      DEBUG: "false"
      APP_NAME: "Aegis Risk Management Platform"
      APP_VERSION: "1.0.0"
      
      # Database - MySQL Production
      DATABASE_URL: mysql+pymysql://${DB_USER:-aegis_user}:${DB_PASSWORD}@db:3306/${DB_NAME:-aegis_production}
      
      # Redis
      REDIS_URL: redis://redis:6379/0
      
      # Security & JWT - Production Secrets
      SECRET_KEY: ${SECRET_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: ${JWT_ACCESS_TOKEN_EXPIRE_MINUTES:-60}
      JWT_REFRESH_TOKEN_EXPIRE_DAYS: ${JWT_REFRESH_TOKEN_EXPIRE_DAYS:-7}
      JWT_ALGORITHM: "HS256"
      ALGORITHM: "HS256"
      
      # CORS - Production Domains
      CORS_ORIGINS: ${CORS_ORIGINS:-'["http://localhost:42361", "https://aegis.yourdomain.com", "https://www.aegis.yourdomain.com"]'}
      
      # File Upload & Storage
      MAX_FILE_SIZE: 104857600  # 100MB for production
      UPLOAD_PATH: /app/uploads
      ALLOWED_FILE_TYPES: '["pdf", "docx", "txt", "csv", "json", "png", "jpg", "jpeg", "xlsx", "pptx"]'
      
      # Logging - Production Level
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      ENABLE_AUDIT_LOGGING: "true"
      SENTRY_DSN: ${SENTRY_DSN:-}
      
      # AI/LLM Providers - Production Configuration
      DEFAULT_LLM_PROVIDER: ${DEFAULT_LLM_PROVIDER:-openai}
      ENABLE_OPENAI: ${ENABLE_OPENAI:-true}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_MODEL: ${OPENAI_MODEL:-gpt-4-turbo-preview}
      OPENAI_MAX_TOKENS: ${OPENAI_MAX_TOKENS:-2000}
      
      ENABLE_AZURE_OPENAI: ${ENABLE_AZURE_OPENAI:-false}
      AZURE_OPENAI_API_KEY: ${AZURE_OPENAI_API_KEY:-}
      AZURE_OPENAI_ENDPOINT: ${AZURE_OPENAI_ENDPOINT:-}
      AZURE_OPENAI_API_VERSION: ${AZURE_OPENAI_API_VERSION:-2024-02-01}
      AZURE_OPENAI_DEPLOYMENT_NAME: ${AZURE_OPENAI_DEPLOYMENT_NAME:-gpt-4-turbo}
      
      ENABLE_ANTHROPIC: ${ENABLE_ANTHROPIC:-false}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-}
      ANTHROPIC_MODEL: ${ANTHROPIC_MODEL:-claude-3-sonnet-20240229}
      
      # External Integrations
      ENABLE_OPENVAS: ${ENABLE_OPENVAS:-false}
      OPENVAS_HOST: ${OPENVAS_HOST:-}
      OPENVAS_USERNAME: ${OPENVAS_USERNAME:-}
      OPENVAS_PASSWORD: ${OPENVAS_PASSWORD:-}
      
      ENABLE_OPENCTI: ${ENABLE_OPENCTI:-false}
      OPENCTI_URL: ${OPENCTI_URL:-}
      OPENCTI_TOKEN: ${OPENCTI_TOKEN:-}
      
      # Email Settings - Production SMTP
      SMTP_SERVER: ${SMTP_SERVER:-smtp.sendgrid.net}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USERNAME: ${SMTP_USERNAME:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      SMTP_USE_TLS: "true"
      EMAIL_FROM: ${EMAIL_FROM:-noreply@aegis.yourdomain.com}
      
      # Authentication - Production
      ENABLE_AZURE_AUTH: ${ENABLE_AZURE_AUTH:-false}
      AZURE_CLIENT_ID: ${AZURE_CLIENT_ID:-}
      AZURE_CLIENT_SECRET: ${AZURE_CLIENT_SECRET:-}
      AZURE_TENANT_ID: ${AZURE_TENANT_ID:-}
      
      # Performance & Monitoring
      ENABLE_METRICS: "true"
      METRICS_PORT: 9090
      PROMETHEUS_MULTIPROC_DIR: /tmp/prometheus_metrics
      
    ports:
      - "${BACKEND_PORT:-26113}:8000"
      - "${METRICS_PORT:-32472}:9090"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - aegis-network-prod
    volumes:
      - uploads_data:/app/uploads
      - reports_data:/app/reports
      - logs_data:/app/logs
      - metrics_data:/tmp/prometheus_metrics
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '1.0'
          memory: 1G

  # Production Frontend
  frontend:
    build:
      context: ../frontend/aegis-frontend
      dockerfile: Dockerfile.prod
      args:
        - VITE_API_URL=http://localhost:26113/api/v1
        - VITE_ENVIRONMENT=production
        - VITE_USE_MOCK_API=false
    container_name: aegis-frontend-prod
    environment:
      NODE_ENV: production
    ports:
      - "${FRONTEND_PORT:-42361}:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - aegis-network-prod
    # Using embedded nginx configuration from Dockerfile.prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:1.25-alpine
    container_name: aegis-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./nginx/sites-available:/etc/nginx/sites-available
      - ./ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - aegis-network-prod
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring - Prometheus (Production)
  prometheus:
    image: prom/prometheus:latest
    container_name: aegis-prometheus-prod
    ports:
      - "${PROMETHEUS_PORT:-9091}:9090"
    volumes:
      - ./monitoring/prometheus.prod.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - aegis-network-prod
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'

  # Monitoring - Grafana (Production)
  grafana:
    image: grafana/grafana:latest
    container_name: aegis-grafana-prod
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_SECURITY_SECRET_KEY: ${GRAFANA_SECRET_KEY}
      GF_DATABASE_TYPE: mysql
      GF_DATABASE_HOST: db:3306
      GF_DATABASE_NAME: grafana
      GF_DATABASE_USER: ${DB_USER:-aegis_user}
      GF_DATABASE_PASSWORD: ${DB_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - db
      - prometheus
    networks:
      - aegis-network-prod
    restart: unless-stopped

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  reports_data:
    driver: local
  logs_data:
    driver: local
  metrics_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  aegis-network-prod:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16