services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: aegis-db
    env_file:
      - ../.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    ports:
      - "${POSTGRES_PORT_HOST:-5432}:5432"
    networks:
      - aegis-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-aegis_user} -d ${POSTGRES_DB:-aegis_db}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: aegis-redis
    ports:
      - "${REDIS_PORT_HOST:-6379}:6379"
    networks:
      - aegis-network
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: aegis-backend
    env_file:
      - ../.env
    environment:
      # These URLs are constructed for the container network.
      REDIS_URL: "redis://redis:6379/0"
    ports:
      - "${BACKEND_PORT_HOST:-30641}:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - aegis-network
    volumes:
      - uploads_data:/app/uploads
      - reports_data:/app/reports
      - logs_data:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Frontend
  frontend:
    build:
      context: ../frontend/aegis-frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL}
        VITE_USE_MOCK_API: ${VITE_USE_MOCK_API}
        VITE_ENVIRONMENT: ${VITE_ENVIRONMENT}
    container_name: aegis-frontend
    env_file:
      - ../.env
    ports:
      - "${FRONTEND_PORT_HOST:-58533}:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - aegis-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: aegis-prometheus
    ports:
      - "${PROMETHEUS_PORT_HOST:-9090}:9090"
    volumes:
      - prometheus_data:/prometheus
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - aegis-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Grafana - Visualization Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: aegis-grafana
    ports:
      - "${GRAFANA_PORT_HOST:-3001}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_SERVER_ROOT_URL=http://localhost:3001
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY:-grafana-secret-key-change-in-production}
    volumes:
      - grafana_data:/var/lib/grafana
      - ../monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - aegis-network
    restart: unless-stopped
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  reports_data:
    driver: local
  logs_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  aegis-network:
    driver: bridge